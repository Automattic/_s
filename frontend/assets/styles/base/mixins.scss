// 渐变背景
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1); // fallback
  background: linear-gradient($direction, $color-stops);
}

// 自适应到
@mixin respond-to($max-breakpoint) {
  @media (max-width:$max-breakpoint) {
    @content;
  }
}

// 滚动条
@mixin scrollbar {
  &::-webkit-scrollbar { /* [2] */
    width: $scrollbar-width;
    background-color: transparent;
  }

  &::-webkit-scrollbar-thumb { /* [2] */
    border-radius: $scrollbar-thumb-border-radius;
    background-color: $scrollbar-thumb-background-color;
  }
}

// 表单
@mixin input {
  @include control;

  background-color: $input-background-color;
  border-color: $input-border-color;
  color: $input-color;

  @include placeholder {
    color: rgba($input-color, 0.3);
  }


  &:hover,
  &.is-hovered {
    border-color: $input-hover-border-color;
  }

  &:focus,
  &.is-focused,
  &:active,
  &.is-active {
    border-color: $input-focus-border-color;
    box-shadow: $input-focus-box-shadow-size $input-focus-box-shadow-color;
  }

  &[disabled] {
    background-color: $input-disabled-background-color;
    border-color: $input-disabled-border-color;
    box-shadow: none;
    color: $input-disabled-color;

    @include placeholder {
      color: rgba($input-disabled-color, 0.3);
    }
  }
}


%arrow {
    border: 3px solid transparent;
    border-radius: 2px;
    border-right: 0;
    border-top: 0;
    content: " ";
    display: block;
    height: 0.625em;
    margin-top: -0.4375em;
    pointer-events: none;
    position: absolute;
    top: 50%;
    transform: rotate(-45deg);
    transform-origin: center;
    width: 0.625em;
}

@mixin text-crop($line-height: 1.3, $top-adjustment: 0px, $bottom-adjustment: 0px) {
  // Configured in Step 1
  $top-crop: 9;
  $bottom-crop: 8;
  $crop-font-size: 36;
  $crop-line-height: 1.2;

  // Apply values to calculate em-based margins that work with any font size
  $dynamic-top-crop: max($top-crop + ($line-height - $crop-line-height) * $crop-font-size / 2, 0) / $crop-font-size;
  $dynamic-bottom-crop: max($bottom-crop + ($line-height - $crop-line-height) * $crop-font-size / 2, 0) / $crop-font-size;

  // Mixin output
  line-height: $line-height;

  &::before,
  &::after {
    content: "";
    display: block;
    height: 0;
    width: 0;
  }

  &::before {
    margin-bottom: calc(-#{$dynamic-top-crop}em + #{$top-adjustment});
  }

  &::after {
    margin-top: calc(-#{$dynamic-bottom-crop}em + #{$bottom-adjustment});
  }
}

// Mixin generated at: http://text-crop.eightshapes.com/?

/* Usage Examples
 * .my-level-1-heading-class {
 *     @include text-crop; // Will use default line height of 1.3
 *     font-size: 48px;
 *     margin: 0 0 0 16px;
 * }
 *
 * .my-level-2-heading-class {
 *     @include text-crop; // Will use default line height of 1.3
 *     font-size: 32px; // Don't need to change any settings, will work with any font size automatically
 *     margin: 0 0 0 16px;
 * }
 *
 * .my-body-copy-class {
 *     @include text-crop($line-height: 2); // Larger line height desired, set the line height via the mixin
 *     font-size: 16px;
 * }
 *
 * // Sometimes depending on the font-size, the rendering, the browser, etc. you may need to tweak the output.
 * // You can adjust the top and bottom cropping when invoking the component using the $top-adjustment and $bottom-adjustment settings
 *
 * .slight-adjustment-needed {
 *     @include text-crop($top-adjustment: -0.5px, $bottom-adjustment: 2px);
 *     font-size: 17px;
 * }
 *
 * .dont-do-this {
 *     @include text-crop;
 *     font-size: 16px;
 *     line-height: 3; // DO NOT set line height outside of the mixin, the mixin needs the line height value to calculate the crop correctly
 * } */

@mixin fix-height($line-height: 1.414, $height: 3em, $line-number: 2) {
  display: -webkit-box !important;
  height: $height;
  line-height: $line-height;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $line-number;
}

@mixin phone {
  @media screen and (max-width: $phone) {
    @content;
  }
}


@mixin clearfix {
    *zoom: 1;

    &::before,
    &::after {
        content: " ";
        display: table;
    }

    &::after {
        clear: both;
    }
}
