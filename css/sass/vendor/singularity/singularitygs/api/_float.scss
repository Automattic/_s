@mixin output-float($span, $location, $columns, $gutter, $options: false) {

  $location-holder: $location;

  @if type-of($location) == string {
    @if end-row($span, $location, $columns) {
      $grid-length: length(find-grid($columns));
      $location-holder: $grid-length - $span;
    }
    @else {
      $location-holder: 1;
    }
  }

  $gutter: find-gutter($gutter);
  $end-row: end-row($span, $location, $columns);
  $start-row: start-row($location);


  width: column-span($span, $location-holder, $columns, $gutter);

  @if $direction == 'ltr' or $direction == 'both' {
    // Set the CSS direction to ltr
    $cssdir: 'ltr';
    // Find the CSS named direction and opposite direction
    $dir: named-direction($cssdir);
    $opp: opposite-direction($dir);

    clear: $opp;

    @if $end-row {
      float: $opp;
      margin-#{$opp}: 0%;
    }
    @else {
      float: $dir;

      @if $start-row {
        margin-#{$dir}: 0%;

      }
      margin-#{$opp}: gutter-span($gutter, $columns);
    }
  }

  @if $direction == 'rtl' or $direction == 'both' {
    // Set the CSS direction to ltr
    $cssdir: 'rtl';
    // Find the CSS named direction and opposite direction
    $dir: named-direction($cssdir);
    $opp: opposite-direction($dir);


    [dir="#{$cssdir}"] & {
      clear: $opp;

      @if $end-row {
        float: $opp;
        margin-#{$opp}: 0%;
      }
      @else {
        float: $dir;

        @if $start-row {
          margin-#{$dir}: 0%;
        }
        margin-#{$opp}: gutter-span($gutter, $columns);
      }
    }
  }

  @include span-shared;
}

@mixin push-float($span, $location, $columns: false, $gutter: false) {

  @if type-of($location) == string {
    $location: 1;
  }

  // Find the columns and gutters
  $columns: find-grid($columns);
  $gutter: find-gutter($gutter);

  // Combine the columns and gutters
  $gutter: column-span($span, $location, $columns, $gutter) + gutter-span($gutter, $columns);

  margin-left: $gutter;
}

@mixin pull-float($span, $location, $columns: false, $gutter: false) {

  @if type-of($location) == string {
    $location: 1;
  }

  // Find the columns and gutters
  $columns: find-grid($columns);
  $gutter: find-gutter($gutter);

  // Combine the columns and gutters
  $gutter: (column-span($span, $location, $columns, $gutter) + gutter-span($gutter, $columns)) * -1;

  margin-left: $gutter;
}

//////////////////////////////
// Happy Syntax for Float
//
// Makes working with Float easier, as it allows you to walk the grid for symmetric grids and easy applying of 'last' and 'first', as well as automatically building the verbose grid-span mixin call
//////////////////////////////
@mixin float-span($span, $location: false, $grid: false, $gutter: false) {
  $grid: find-grid($grid);
  $gutter: find-gutter($gutter);
  $row: false;

  // Working around SASS treating a number like a list with one element
  @if type-of($grid) == 'list' and length($grid) == 1 {
    $grid: nth($grid, 1);
  }

  // Working with a symmetric grid
  @if type-of($grid) == 'number' {
    // Special treatment for non-numeric location
    @if type-of($location) != 'number' {
      @if $location == 'last' or $location == 'omega' {
        $location: $grid - $span + 1;
      }
      @else {
        @if $location == 'first' or $location == 'alpha' {
          $row: true;
        }
        $location: 1;
      }
    }

    @include grid-span($span, $location, $grid, $gutter, 'float');

    @if $row {
      clear: both;
    }
  }
  // Working with an asymmetric grid, should have location provided
  @else if type-of($grid) == 'list' and $location != false {
    @include grid-span($span, $location, $grid, $gutter, 'float');
  }
  @else {
    @warn 'Asymmetric Grids need a Location value as well as a span value in order to know where on the grid you are! Please include a location value!';
  }
}
