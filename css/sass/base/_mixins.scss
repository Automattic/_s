
/* ==========================================================================
   Mixins
   ========================================================================== */

// Box Sizing
@mixin box-sizing( $box-model ) {
	-webkit-box-sizing: $box-model; // Safari <= 5
	   -moz-box-sizing: $box-model; // Firefox <= 19
			box-sizing: $box-model;
}

// Convert pixels to ems (Foundation)
@function emCalc( $pxWidth, $em-base:16px ) {
	@return $pxWidth / $em-base * 1em;
}

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 16px;

@mixin rem( $property, $px-values ) {
	// Convert the baseline into rems
	$baseline-rem: $baseline-px / 1rem;
	// Print the first line in pixel values
	#{$property}: $px-values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of( $px-values ) == "number" {
		#{$property}: $px-values / $baseline-rem;
	} @else {
		// Create an empty list that we can dump values into
		$rem-values: unquote("");
		@each $value in $px-values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem-values: append( $rem-values, $value );
			}
			@else {
				$rem-values: append( $rem-values, $value / $baseline-rem );
			}
		}
		// Return the property and its list of converted values
		#{$property}: $rem-values;
	}
}

// List Grid
$create-grid-classes: false !default; // Generate default css
$list-grid-total: 12 !default; // Maximum elements per row
$list-item-spacing: 10px !default; // Default spacing
$list-grid-spacing: 0 !default;
@mixin list-grid( $per-row: false, $item-spacing: $list-item-spacing, $list-spacing: $list-grid-spacing, $base-style: true ) {

	@if $base-style {
		margin: 0 (-$item-spacing/2);
		padding: $list-spacing;
		list-style-type: none;
		letter-spacing: -0.31em;
		& > li {
			display: inline-block;
			letter-spacing: normal;
			vertical-align: top;
			*display: inline; // conditional class below not working?
			*zoom: 1;  // conditional class below not working?
		}
		.lt-ie8 & > li {
			display: inline;
			zoom: 1;
		}
	}
	@if $per-row {
		& > li {
			padding: 0 ( $item-spacing / 2 ) $item-spacing;
			width: 100% / $per-row;
		}
	}
}
@if $create-grid-classes {
	// Output base styling
	.list-grid, [class*="list-grid-"] { @include list-grid; }
	// Output list grids
	@for $i from 1 through $list-grid-total {
		.list-grid-#{($i)} {
			@include list-grid( $i, $list-item-spacing, $list-grid-spacing, false );
		}
	}
}
