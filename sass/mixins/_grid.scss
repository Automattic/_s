/// All mixins for the responsive grid system.
///
/// This is heavily influenced by the Semantic Grid http://semantic.gs
///
/// (Adapted into Sass for this project. Original authors listed below.)
///
/// @author Abban Dunne http://abandon.ie
/// @author James Wilson http://jimmynotjim.com

// Utility variable â€” you should never need to modify this.
$gridsystem_width: (1px * $columns);
$padding: ($gutter_width * 0.5);

/// Make this element a row (i.e. a horizontally-centred container for columns).
///
/// @global $max_width
///
/// @param {Number} $padding [0] Horizontal padding to apply to the row (i.e.
///                              half the gutter width).
@mixin row($padding: 0) {
	@if (0 != $padding) and unitless($padding) {
		@error "$padding must not be unitless, was #{$padding}";
	}

	// Output
	@include clearfix;
	display: block;
	max-width: $max_width;
	margin: 0 auto;
	padding: 0 $padding;
}

/// Make this element a row within a column.
///
/// Separate mixin, so that negative margins can be applied to line the columns
/// up properly.
///
/// @global $max_width
/// @global $gutter_width
///
/// @param {Number} $padding [0] Horizontal padding to apply to the row (i.e.
///                              half the gutter width).
@mixin nested-row($padding: 0) {
	@if (0 != $padding) and unitless($padding) {
		@error "$padding must not be unitless, was #{$padding}";
	}

	// Output
	@include clearfix;
	display: block;
	max-width: $max_width;
	margin: 0 (-0.5 * $gutter_width);
	padding: 0 $padding;
}

/// Make this element a specified number of columns wide.
///
/// @param {Number} $x       Number of columns this element should span.
/// @param {Number} $padding Horizontal padding to apply to this column.
/// @param {Number} $columns Total number of columns the container row spans.
@mixin column($x, $padding: $padding, $columns: $columns) {
	@if not unitless($x) or (abs($x) != $x) {
		@error "$x must be a unitless whole number, was #{$x}";
	}
	@if (0 != $padding) and unitless($padding) {
		@error "$padding must not be unitless, was #{$padding}";
	}
	@if not unitless($columns) or (abs($columns) != $columns) {
		@error "$columns must be a unitless whole number, was #{$columns}";
	}

	// Output
	float: left;
	display: inline;
	width: (100% * ($x / $columns));
	padding: 0 $padding;
}

/// Add left margin to push this column a specified number of columns to the
/// right.
///
/// @param {Number} $offset [1] Number of empty columns to the left of this
///                             column.
/// @param {Number} $columns    Total number of columns the container row spans.
@mixin push($offset: 1, $columns: $columns) {
	@if not unitless($offset) or (abs($offset) != $offset) {
		@error "$offset must be a unitless whole number, was #{$offset}";
	}
	@if not unitless($columns) or (abs($columns) != $columns) {
		@error "$columns must be a unitless whole number, was #{$columns}";
	}

	// Output
	margin-left: (100% * ($offset / $columns));
}

/// Add right margin to push the next column a specified number of columns to
/// the left.
///
/// @param {Number} $offset [1] Number of empty columns to the right of this
///                             column.
/// @param {Number} $columns    Total number of columns the container row spans.
@mixin pull($offset: 1, $columns: $columns) {
	@if not unitless($offset) or (abs($offset) != $offset) {
		@error "$offset must be a unitless whole number, was #{$offset}";
	}
	@if not unitless($columns) or (abs($columns) != $columns) {
		@error "$columns must be a unitless whole number, was #{$columns}";
	}

	// Output
	margin-right: (100% * ($offset / $columns));
}
