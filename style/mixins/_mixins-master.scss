// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

//Hidden text (screen-reader readable only)
@mixin screen-reader-text() {
	clip: rect(1px, 1px, 1px, 1px);
    position: absolute !important;
    height: 1px;
    width: 1px;
    overflow: hidden;
}

@mixin font($font) {

	@if type-of($font) == 'map' {
		
			$font: map-remove( $font, 'source' );
		
			@each $font-prop, $font-value in $font {
		    #{$font-prop}: $font-value;
			}		
	}	@else if type-of($font) == 'string' {			
		
			@if variable-exists( 'fonts' ) and map-has-key($fonts, $font) {
					@include font( map-get($fonts, $font) );
			} @else {
				font-family: $font;
			}
	}	
}

@mixin icon($icon) {

	@if type-of($icon) == 'map' {
		@include font($icon);	
	}	@else if type-of($icon) == 'string' {			
		
	@if variable-exists( 'icons' ) and map-has-key($icons, $icon) {
		@include font( map-get($icons, $icon) );
	} @else {
			font-family: $icon;
		}
	}	
}

@mixin icon-content($hex) {
	@include icon('theme');
	content: "#{$hex}";
}


@function breakpoint( $index ) {
		@return #{nth($main_breakpoints, $index)}px
}

@function map-deep-get($map, $keys...) {
  $value: $map;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}